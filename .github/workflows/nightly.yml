name: Nightly

on:
  push:
    branches: 
    - 'dev'

jobs:
  nightly:
    runs-on: ${{ matrix.os }}
    name: Deploy nightly
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [nightly]
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
          - os: macos-latest
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
          - os: windows-latest
            sccache-path: C:\Users\runner\AppData\Local\Mozilla\sccache
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
    steps:
      - uses: actions/checkout@v2
      - name: Install sccache (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          brew install sccache
      - name: Install sccache (windows-latest)
        if: matrix.os == 'windows-latest'
        run: |
          choco install sccache
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: false
          default: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-v1-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-v1
      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.sccache-path }}
          key: ${{ runner.os }}-sccache-v1-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-v1
      - name: Start sccache server
        run: sccache --start-server
      - name: Build
        run: cargo build --release

      - name: Build asset
        run: |
          strip mdr*
          7z a starlight-nightly.zip target/release/sl*
      - name: Set tag
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f -a nightly -m "Nightly update"
          git push origin -f --follow-tags nightly
      - name: Deploy release
        uses: WebFreak001/deploy-nightly@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/Starlight-JS/starlight/releases/46664777/assets{?name,label}
          release_id: 46664777 # same as above (id can just be taken out the upload_url, it's used to find old releases)
          asset_path: ./starlight-nightly.zip # path to archive to upload
          asset_name: starlight-nightly-${{matrix.os}}-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/zip # required by GitHub API
          max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
